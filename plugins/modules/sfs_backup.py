#!/usr/bin/env python
# pylint: disable=unspecified-encoding, consider-using-with
# -*- coding: utf-8 -*-
# Copyright 2021 Dell Inc. or its subsidiaries. All Rights Reserved
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for sfs_backup
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

DOCUMENTATION = """
---
module: sfs_backup
short_description: Backup and restore functionality on Dell SmartFabric Services.
description:
  - This module is used to take the back up of OS image and redirect it to the given file locally.
author: Kalaivani Baskaran <kalaivanibaskaran.ba@Dellteam.com>
"""
EXAMPLES = '''
Copy below YAML into a playbook (e.g. play.yml) and run as follows:

#$ ansible-playbook -i inventory play.yaml
- hosts: all
  gather_facts: false
  collections:
    dellemc.sfs
  tasks:
    - name: Get Backup
      block:
        - name: SFS Backup
          dellemc.sfs.sfs_backup:
            file_name: 'backup.json'
          register: result
    - name: Debug the result
      debug: var=result
'''

from ansible_collections.dellemc.sfs.plugins.module_utils.sfs.sfs import SFSConfig, extract_id_value
from ansible.module_utils.basic import AnsibleModule
import json


class SFSBackup(SFSConfig):
    def __init__(self):
        argument_spec = {
            'state': {
                'type': 'str',
                'default': "present",
                'required': False
            },
            'file_name': {
                'type': 'str',
                'required': True
            }
        }
        module = AnsibleModule(argument_spec=argument_spec)
        SFSConfig.__init__(self, module, False)
        self.payload_arg_map = {}
        self.path = "Backup"


if __name__ == "__main__":
    sfs_backup = SFSBackup()
    result = sfs_backup.get_module_config()
    f = open(sfs_backup.module.params['file_name'], 'w')
    f.write(json.dumps(result['response']))
    sfs_backup.module.exit_json(**result)
