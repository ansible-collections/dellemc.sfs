#!/usr/bin/env python
# pylint: disable=consider-using-f-string
# -*- coding: utf-8 -*-
# Copyright 2021 Dell Inc. or its subsidiaries. All Rights Reserved
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for sfs_nodes
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

DOCUMENTATION = """
---
module: sfs_nodes
short_description: Configure 'blink', 'unblink', 'reboot', 'rollback', 'factorydefault' settings on Dell SmartFabric Services.
description:
  - This module is used to manage 'blink', 'unblink', 'reboot', 'rollback', 'factorydefault' configurations on Dell SmartFabric Services.
author: Ranjith Sunkesula <Ranjith_Senkesula@Dellteam.com>
options:
  node_id:
    description:
      - Configures the service tag information of the node.
    type: str
    required: False
  state:
    description:
      - The state the configuration should be left in.
    type: str
    default: present
    required: False
"""
EXAMPLES = '''
Copy below YAML into a playbook (e.g. play.yml) and run as follows:

#$ ansible-playbook -i inventory play.yaml
- hosts: all
  gather_facts: false
  collections:
    - dellemc.sfs
  tasks:
    - name: Provision Configs
      block:
        - name: sfs_nodes
          dellemc.sfs.sfs_nodes:
            action:  "unblink"        # ['blink', 'unblink', 'reboot', 'rollback', 'factorydefault']
            node_id: "VB9D06E"
            state: 'present'
          register: result

    - name: Debug the result
      debug: var=result
'''


from ansible_collections.dellemc.sfs.plugins.module_utils.sfs.sfs import SFSConfig, extract_id_value
from ansible_collections.ansible.netcommon.plugins.module_utils.network.restconf import (
    restconf,)
from ansible.module_utils.basic import AnsibleModule


class SFSNodes(SFSConfig):
    def __init__(self):
        argument_spec = {
            'state': {
                'type': 'str',
                'default': "present",
                'required': False
            },
            'node_id': {
                'type': 'str',
                'required': False
            },
            'name': {
                'type': 'str',
                'required': False
            },
            'description': {
                'type': 'str',
                'required': False
            },
            'action': {
                'type': 'str',
                'default': "blink",
                'required': False,
                'choices': ['nodehandler', 'blink', 'unblink', 'reboot', 'rollback', 'factorydefault']
            }

        }
        module = AnsibleModule(argument_spec=argument_spec)
        SFSConfig.__init__(self, module)
        self.payload_arg_map = {
            'NodeId': 'node_id',
            'Name': 'name',
            'Description': 'description'
        }
        if self.module.params['action'] == "blink":
            self.path = "Nodes('%s')/Nodes.Blink" % (self.module.params['node_id'])
            self.resource_id = self.module.params['node_id']
        elif self.module.params['action'] == "unblink":
            self.path = "Nodes('%s')/Nodes.Unblink" % (self.module.params['node_id'])
            self.resource_id = self.module.params['node_id']
        elif self.module.params['action'] == "nodehandler":
            self.path = "Nodes"
            self.resource_id = self.module.params['node_id']
        elif self.module.params['action'] == "reboot":
            self.path = "Nodes('%s')/Nodes.Reboot" % (self.module.params['node_id'])
            self.resource_id = self.module.params['node_id']
        elif self.module.params['action'] == "rollback":
            self.path = "Nodes('%s')/Nodes.Rollback" % (self.module.params['node_id'])
            self.resource_id = self.module.params['node_id']
        elif self.module.params['action'] == "factorydefault":
            self.path = "Nodes('%s')/Nodes.FactoryDefault" % (self.module.params['node_id'])
            self.resource_id = self.module.params['node_id']


if __name__ == "__main__":
    SFSNodes().execute_module()
