#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright 2021 Dell Inc. or its subsidiaries. All Rights Reserved
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for sfs_network
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

DOCUMENTATION = """
---
module: sfs_network
short_description: Configure VLANs protocol, VXLAN, L3_ROUTED, and L3 settings on a Dell SmartFabric Services.
description:
  - This module is used to manage network configuration.
author: Ranjith Sunkesula <Ranjith_Senkesula@Dellteam.com>
options:
  network_id:
    description:
      - Configures the network identification as an unique ID.
    type: str
    required: False
  network_name:
    description:
      - Configures the name of the network.
    type: str
    required: False
  network_description:
    description:
      - Configures the network description.
    type: str
    required: False
  vlan_min:
    description:
      - Configures the VLAN tag start value; vlan_min and vlan_max shall be the same in case of single tag VLAN.
    type: int
    required: False
  vlan_max:
    description:
      - Configures the VLAN tag end value; vlan_min and vlan_max shall be the same in case of single tag VLAN.
    type: int
    required: False
  network_type:
    description:
      - Configures the type of the network.
    type: str
    required: False
  qos_priority:
    description:
      - Configures the QoS priority setting for the network.
    type: str
    required: False
  address_family:
    description:
      - Configures the address family as a string.
    type: str
    required: False
  prefix_length:
    description:
      - Configures the prefix length.
    type: int
    required: False
  ip_address_list:
    description:
      - Configures the network IP address list.
    type: list
    required: False
  helper_address:
    description:
      - Configures the network helper IP address.
    type: list
    required: False
  gateway_ip_address:
    description:
      - Configures the network gateway IP address.
    type: str
    required: False

  virtual_network:
    description:
      - Configures a virtual network.
    type: str
    required: False
  route_map:
    description:
      - Configures the route map.
    type: str
    required: False
  rack_settings:
    description:
      - Configures the rack information such as Rack ID, address family, preflix lenght, and gateway IP address.
    type: list
    required: False
  originator:
    description:
      - Configures the network originator.
    type: str
    required: False
  state:
    description:
      - The state the configuration should be left in.
    type: str
    default: present
    required: False
"""
EXAMPLES = '''
Copy below YAML into a playbook (e.g. play.yml) and run as follows:

#$ ansible-playbook -i inventory play.yaml
- hosts: all
  gather_facts: false
  collections:
    - dellemc.sfs
  tasks:
    - name: Privision Configs
      block:

        - name: sfs_network
          dellemc.sfs.sfs_network:
             network_name: "sfs_network"
             network_id: "Leaf-test-GeneralPurpose"
             vlan_min: 752
             vlan_max: 752
             qos_priority: "Gold"
             network_type: "GeneralPurpose"
             network_description: "SFS Network Create Test From Ansible-ddddd"
             state: "present"
          register: result

        - name: Update Network
          dellemc.sfs.sfs_network:
             network_id: "My_L3_ROUTED_Network_Id_1"
             network_name: "My_L3_ROUTED_Network_Name_1"
             network_description: "My_L3_ROUTED_Network_Description_1"
             network_type: "L3_ROUTED"
             qos_priority: "Bronze"
             address_family: "inet"
             prefix_length: 24
             ip_address_list: ["192.168.1.2","192.168.1.4"]
             helper_address: ["10.10.10.10","11.11.11.11"]
             gateway_ip_address: ["192.168.1.3"]
             route_map: "routemap1"
             state: "present"
          register: result

        - name: Update VXLAN Network
          dellemc.sfs.sfs_network:
             network_id: "My_VXLAN_Network_Id"
             vlan_min: 400
             vlan_max: 400
             qos_priority: "Bronze"
             network_type: "VXLAN"
             virtual_network: "vnet1"
             network_name: "My_VXLAN_Network_Id"
             network_description: "My_VXLAN_Network_Description"
             originator: "vCenter_user"
             state: "present"
          register: result

        - name: MULTIRACK L3 VLAN
          dellemc.sfs.sfs_network:
             network_id: "SREEJITHNETWORK1"
             network_name: "Network1"
             network_description: "My_L3 VLAN_Network_Description_1"
             vlan_max: 401
             vlan_min: 401
             qos_priority: "Iron"
             network_type: "MULTIRACK_L3_VLAN"
             rack_settings: [{ RackID: "6298f46c-b8a8-4548-8bfb-14ee34303147", AddressFamily: "inet", PrefixLen: 24, GateWayIpAddress: ["10.1.1.254"],
             IpAddressList: ["10.1.1.1","10.1.1.2"], HelperAddress: ["10.10.10.10","10.11.11.11"] }]
             state: "present"
          register: result

    - name: Debug the result
      debug: var=result
'''


from ansible_collections.dellemc.sfs.plugins.module_utils.sfs.sfs import SFSConfig, extract_id_value
from ansible_collections.ansible.netcommon.plugins.module_utils.network.restconf import (
    restconf,)
from ansible.module_utils.basic import AnsibleModule


class SFSNetwork(SFSConfig):
    def __init__(self):
        argument_spec = {
            'state': {
                'type': 'str',
                'default': "present",
                'required': False
            },
            'network_id': {
                'type': 'str',
                'required': True
            },
            'network_name': {
                'type': 'str',
                'required': False
            },
            'network_description': {
                'type': 'str',
                'required': False
            },
            'qos_priority': {
                'type': 'str',
                'default': "Iron",
                'required': False,
                'choices': ['Platinum', 'Gold', 'System', 'Iron', 'Silver', 'Bronze']
            },
            'vlan_min': {
                'type': 'int',
                'required': False
            },
            'vlan_max': {
                'type': 'int',
                'required': False
            },
            'network_type': {
                'type': 'str',
                'required': True,
                'choices': ['VXLAN', 'L3_ROUTED', 'L3', 'GeneralPurpose', 'MULTIRACK_L3_VLAN']
            },
            'address_family': {
                'type': 'str',
                'required': False,
                'choices': ['inet']
            },
            'prefix_length': {
                'type': 'int',
                'required': False
            },
            'ip_address_list': {
                'type': 'list',
                'required': False
            },
            'helper_address': {
                'type': 'list',
                'required': False
            },
            'gateway_ip_address': {
                'type': 'list',
                'required': False
            },
            'virtual_network': {
                'type': 'str',
                'required': False
            },
            'route_map': {
                'type': 'str',
                'required': False
            },
            'originator': {
                'type': 'str',
                'required': False
            },
            'rack_settings': {
                'type': 'list',
                'required': False
            },
            'rack_id': {
                'type': 'str',
                'required': False
            }

        }
        module = AnsibleModule(argument_spec=argument_spec)
        SFSConfig.__init__(self, module)
        self.payload_arg_map = {
            'NetworkId': 'network_id',
            'NetworkName': 'network_name',
            'NetworkType': 'network_type',
            'Description': 'network_description',
            'QosPriority': 'qos_priority',
            'VlanMinimum': 'vlan_min',
            'VlanMaximum': 'vlan_max',
            'AddressFamily': 'address_family',
            'PrefixLen': 'prefix_length',
            'IpAddressList': 'ip_address_list',
            'HelperAddress': 'helper_address',
            'GateWayIpAddress': 'gateway_ip_address',
            'VirtualNetwork': 'virtual_network',
            'RouteMap': 'route_map',
            'RackSettings': 'rack_settings',
            'Originator': 'originator',
            'RackID': 'rack_id'

        }

        self.path = "Networks"
        self.resource_id = self.module.params['network_id']


if __name__ == "__main__":
    SFSNetwork().execute_module()
